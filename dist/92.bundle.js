"use strict";(self.webpackChunkzosusoft_prj_hirokazu=self.webpackChunkzosusoft_prj_hirokazu||[]).push([[92],{92:(e,n,o)=>{o.r(n),o.d(n,{DynamicConversationScene:()=>a});class a extends Phaser.Scene{constructor(){super(),this.eventId=null,this.resourcesLoaded=!1,this.audioManager=null}init(e){this.eventId=e.eventId,console.log(`[DynamicConversationScene] init called with eventId: ${this.eventId}`)}async preload(){console.log(`[DynamicConversationScene] preload started for event: ${this.eventId}`),this.load.on("complete",(()=>{console.log(`[DynamicConversationScene] リソース読み込み完了: ${this.eventId}`),console.log("[DynamicConversationScene] 読み込まれたリソース:",this.cache.texture?.entries||"texture cache not available")})),this.load.on("error",(e=>{console.error("[DynamicConversationScene] リソース読み込みエラー:",e)})),await this.loadRequiredResources()}async loadRequiredResources(){const{getRequiredResources:e,getEventConfig:n}=await o.e(557).then(o.bind(o,557));this.eventConfig=n(this.eventId);const a=e(this.eventId);console.log("[DynamicConversationScene] eventConfig:",this.eventConfig),console.log("[DynamicConversationScene] required resources:",a),a&&(console.log("[DynamicConversationScene] 背景画像読み込み開始"),a.backgrounds?.forEach((e=>{console.log(`[DynamicConversationScene] 背景画像読み込み: ${e} -> assets/backgrounds/miemachi_bk/${e}.png`),this.load.image(e,`assets/backgrounds/miemachi_bk/${e}.png`)})),a.characters?.forEach((e=>{this.load.image(e,`assets/characters/portraits/${e}.png`)})),a.bgm||a.se)&&(this.audioManager=new((await Promise.resolve().then(o.bind(o,296))).AudioManager)(this),await this.audioManager.loadConversationAudio(this.eventId)||console.warn("[DynamicConversationScene] 音楽ファイルの読み込みに失敗")),await this.loadConversationData(),this.conversationDataLoaded=!0,a&&(a.backgrounds||a.characters||a.bgm||a.se)&&(console.log("[DynamicConversationScene] Phaserのloader開始"),await new Promise((e=>{this.load.on("complete",(()=>{console.log("[DynamicConversationScene] Phaserのloader完了"),e()})),this.load.start()}))),this.resourcesLoaded=!0,console.log("[DynamicConversationScene] リソース読み込み完了")}loadConversationData(){return new Promise((e=>{console.log(`[DynamicConversationScene] loadConversationData開始: eventId=${this.eventId}`),console.log("[DynamicConversationScene] eventConfig:",this.eventConfig);const n=this.eventConfig?.areaType;if(console.log(`[DynamicConversationScene] areaType: ${n}`),n)switch(n){case"miemachi":console.log("[DynamicConversationScene] miemachiのconversationDataを読み込み中..."),Promise.resolve().then(o.bind(o,362)).then((({miemachiConversationData:n})=>{const o=this.eventConfig.conversationDataKey;console.log(`[DynamicConversationScene] conversationKey: ${o}`),console.log("[DynamicConversationScene] miemachiConversationData:",n),this.conversationData=n[o],console.log("[DynamicConversationScene] 設定されたconversationData:",this.conversationData),e()}));break;case"taketa":console.log("[DynamicConversationScene] taketaのconversationDataを読み込み中..."),Promise.resolve().then(o.bind(o,327)).then((({taketaConversationData:n})=>{const o=this.eventConfig.conversationDataKey;console.log(`[DynamicConversationScene] conversationKey: ${o}`),this.conversationData=n[o],console.log("[DynamicConversationScene] 設定されたconversationData:",this.conversationData),e()}));break;case"japan":console.log("[DynamicConversationScene] japanのconversationDataを読み込み中..."),Promise.resolve().then(o.bind(o,527)).then((({japanConversationData:n})=>{const o=this.eventConfig.conversationDataKey;console.log(`[DynamicConversationScene] conversationKey: ${o}`),this.conversationData=n[o],console.log("[DynamicConversationScene] 設定されたconversationData:",this.conversationData),e()}));break;default:console.log(`[DynamicConversationScene] 不明なareaType: ${n}`),e()}else console.log("[DynamicConversationScene] areaTypeが設定されていません"),e()}))}create(){if(console.log(`[DynamicConversationScene] create started for event: ${this.eventId}`),!this.resourcesLoaded||!this.conversationDataLoaded)return console.log(`[DynamicConversationScene] リソース読み込み待機中: ${this.eventId}`),void this.time.delayedCall(100,(()=>{this.create()}));console.log(`[DynamicConversationScene] ConversationScene開始: ${this.eventId}`),console.log("[DynamicConversationScene] this.audioManager:",this.audioManager),this.scene.start("ConversationScene",{conversationId:this.eventId,eventConfig:this.eventConfig,conversations:this.conversationData,audioManager:this.audioManager})}}}}]);